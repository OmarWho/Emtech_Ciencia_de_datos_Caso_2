# -*- coding: utf-8 -*-
"""
Created on Thu Jan  6 17:35:15 2022

@author: Omar Alvarado Gardu√±o
"""

#%%

# import pandas, seaborn and matplotlib modules
import pandas as pd
import seaborn as sns
import matplotlib as plot

#%%

# read synergy_logistics_database.csv file
df = pd.read_csv('synergy_logistics_database.csv',
                 encoding="utf-8",
                 parse_dates=[5])

#%%
"""Option 1) Routes of importation and exportation"""

"""
Analysis of the top 10 routes by year.
Each route consists in origin, destination and transport_mode.
Objetive: To determine the most 10 demanded routes over the years of exports 
and imports.
"""

def obtain_top_10_routes_by_year(df, direction):
    # dataframe of routes by year
    routes = df[df['direction'] == direction].\
             groupby(['origin', 'destination', 'transport_mode', 'year']).\
             count()['register_id'].to_frame().\
             rename(columns={'register_id':'frequency'})

    # sort routes by frequency
    routes = routes.sort_values(['year','frequency'], ascending = [True, False]).\
                     reset_index()

    # list of years of the routes
    years_list = routes['year'].unique()

    # obtain top 10 of routes
    top_10_routes = pd.DataFrame()
    for year in years_list:
        top_10_routes_from_year = routes[routes['year'] == year].head(10)
        top_10_routes = pd.concat([top_10_routes, top_10_routes_from_year])
    return top_10_routes

def obtain_top_10_routes(df, direction):
    # dataframe of routes
    routes = df[df['direction'] == direction].\
             groupby(['origin', 'destination', 'transport_mode']).\
             count()['register_id'].to_frame().\
             rename(columns={'register_id':'frequency'})

    # sort dataframe of routes by frequency
    routes.sort_values('frequency', ascending = False, inplace = True)
    routes.reset_index(inplace=True)

    # obtain top 10 routes over the years
    top_10_routes = routes.head(10)
    return top_10_routes

def graph_routes(routes, by_year=False, palette='tab10'):
    # add column route
    routes['route'] = routes['origin'] + '-' + \
                      routes['destination'] + '-' + \
                      routes['transport_mode']

    # plot top 10 of routes
    sns.set(font_scale = 0.1)
    if by_year:
        sns.set(rc={'figure.figsize':(15.7,15.27)})
        sns.catplot(data=routes, 
                    x = 'frequency', 
                    y = 'route',
                    palette = palette,
                    height=10,
                    col = 'year',
                    kind = 'bar')
    else:
        sns.set(rc={'figure.figsize':(15.7,8.27)})
        sns.catplot(data=routes, 
                    x = 'frequency', 
                    y = 'route',
                    palette = palette,
                    kind = 'bar')

# obtain top 10 routes by year according to the direction
top_10_routes_by_year_exp = obtain_top_10_routes_by_year(df, 'Exports')
top_10_routes_by_year_imp = obtain_top_10_routes_by_year(df, 'Imports')

# graph top 10 routes by year
graph_routes(top_10_routes_by_year_exp, True)
graph_routes(top_10_routes_by_year_imp, True, 'dark')

# obtain top 10 routes over the years according to the direction
top_10_routes_exp = obtain_top_10_routes(df, 'Exports')
top_10_routes_imp = obtain_top_10_routes(df, 'Imports')

# graph top 10 routes over the years
graph_routes(top_10_routes_exp)
graph_routes(top_10_routes_imp, palette = 'dark')


#%%
"""Option 2) Means of transportation"""

"""
Analysis of the transportation means.
Objective: To determine the 3 most important means of transport over the years 
and months according to the value of exports and imports.
"""

# copy the data from dataframe
df_transport = df.copy()

def analysis(df, direction):
    # divide data according to direction
    df = df[df['direction'] == direction]
    
    # classify data by year and month
    df['year_month'] = df['date'].dt.strftime('%Y-%m')

    # group data by mode of transport and year_month
    transport_yyyy_mm = df.groupby(['year_month', 'transport_mode'])

    # obtain sum of the total value from every month and year generated by each
    # mode of transport
    transport_yyyy_mm = transport_yyyy_mm.sum()['total_value'].to_frame().\
                        reset_index()

    # graph the total value genrated by each mode of transport over time
    sns.set(rc={'figure.figsize':(55.7,8.27)})
    plot.pyplot.figure()
    sns.barplot(data=transport_yyyy_mm, 
                x='year_month', 
                y='total_value',
                hue='transport_mode')


    # group data by mode of transport and year
    transport_yyyy = df.groupby(['year', 'transport_mode'])

    # obtain sum of the total value from every year generated by each
    # mode of transport
    transport_yyyy_sum = transport_yyyy.sum()['total_value'].to_frame().\
                        reset_index()

    # graph the total value genrated by each mode of transport over time
    sns.set(rc={'figure.figsize':(11.7,8.27)})
    plot.pyplot.figure()
    sns.barplot(data=transport_yyyy_sum, 
                x='year', 
                y='total_value',
                hue='transport_mode')


    # obtain sum of the total value generated by each mode of transport
    transport = transport_yyyy_sum.groupby('transport_mode').sum().reset_index()

    # graph the total value genrated by each mode of transport over time
    sns.set(rc={'figure.figsize':(15.7,8.27)})
    plot.pyplot.figure()
    sns.barplot(data=transport, 
                x='transport_mode', 
                y='total_value')

# obtain analysis according to direction
analysis(df, 'Exports')
analysis(df, 'Imports')

#%%
"""Option 3) Total value"""

"""
Analysis of the total_value by countries.
Objective: To determine the group of countries that contribute 80% of the total 
value of exports and imports.
Note: The classification of countries is by origin of the export/import.
"""

# copy the data from dataframe
df_value = df.copy()

def group_countries_per_year(df, direction, percentage, year):
    # obtain sum of total value by country
    countries_total_value = df[(df['direction'] == direction) & (df['year'] == year)].groupby(['origin']).sum()['total_value'].\
                            to_frame().reset_index()

    # obtain sum of total value
    total_value = countries_total_value['total_value'].sum()

    # obtain percentage of contribution of each coountry
    countries_total_value['percent'] = 100 * countries_total_value['total_value'] / total_value

    # sort by percentage
    countries_total_value.sort_values(by = 'percent', 
                                      ascending = False,
                                      inplace = True)

    # calculate accumulated percentage
    countries_total_value['accumulated_%'] = countries_total_value['percent'].cumsum()

    # obtain group of countries which generate the 80% of the total value
    countries_generate_per = countries_total_value[countries_total_value['accumulated_%'] <= percentage]
    
    # add a row with the other countries
    per_accumulated = countries_generate_per['accumulated_%'].iloc[-1]
    other_countries = {'origin': 'Otros', 
                       'total_value': total_value * (100 - per_accumulated) / 100,
                       'percent': 100 - per_accumulated,
                       'accumulated_%':100}
    countries_generate_per = countries_generate_per.append(other_countries, ignore_index=True)
    
    # include the column year
    countries_generate_per = countries_generate_per.assign(year = year)
    
    return countries_generate_per

def group_countries(df, direction, percentage):
    # obtain sum of total value by country
    countries_total_value = df[df['direction'] == direction].groupby(['origin']).sum()['total_value'].\
                            to_frame().reset_index()

    # obtain sum of total value
    total_value = countries_total_value['total_value'].sum()

    # obtain percentage of contribution of each coountry
    countries_total_value['percent'] = 100 * countries_total_value['total_value'] / total_value

    # sort by percentage
    countries_total_value.sort_values(by = 'percent', 
                                      ascending = False,
                                      inplace = True)

    # calculate accumulated percentage
    countries_total_value['accumulated_%'] = countries_total_value['percent'].cumsum()

    # obtain group of countries which generate the 80% of the total value
    countries_generate_per = countries_total_value[countries_total_value['accumulated_%'] <= percentage]
    
    # add a row with the other countries
    per_accumulated = countries_generate_per['accumulated_%'].iloc[-1]
    other_countries = {'origin': 'Otros', 
                       'total_value': total_value * (100 - per_accumulated) / 100,
                       'percent': 100 - per_accumulated,
                       'accumulated_%':100}
    countries_generate_per = countries_generate_per.append(other_countries, ignore_index=True)
    
    return countries_generate_per

# obtain list of the years
years_list = df['year'].unique()

# dataframe with countries that generate 80% of total value
countries_80_exp = pd.DataFrame()
countries_80_imp = pd.DataFrame()

for year in years_list:
    countries_80_exp = pd.concat([countries_80_exp, group_countries_per_year(df, 'Exports', 85, year)])
    countries_80_imp = pd.concat([countries_80_imp, group_countries_per_year(df, 'Imports', 85, year)])

# count how many times the countries contribute with the 80% of the total value
countries_80_exp_over_time = countries_80_exp[countries_80_exp['origin'] != 'Otros'].\
                             groupby('origin').\
                             count()['total_value'].\
                             sort_values(ascending= False)
countries_80_imp_over_time = countries_80_imp[countries_80_imp['origin'] != 'Otros'].\
                             groupby('origin').\
                             count()['total_value'].\
                             sort_values(ascending= False)

# graph percentage of countries
g_exp = countries_80_exp[['year', 'origin', 'percent']]
sns.catplot(data=g_exp, 
            x='percent',
            y='origin',
            col='year',
            kind='bar')

g_imp = countries_80_imp[['year', 'origin', 'percent']]
sns.catplot(data=g_imp, 
            x='percent',
            y='origin',
            col='year',
            kind='bar')

# obtain group of countries that contribute 80% whitout considering each year
countries_80_exp_global = group_countries(df, 'Exports', 85)
countries_80_imp_global = group_countries(df, 'Imports', 85)

# graph percentage of countries
g_exp_global = countries_80_exp_global[['origin', 'percent']]
sns.barplot(data=g_exp_global, 
            x='origin',
            y='percent')

g_imp_global = countries_80_imp_global[['origin', 'percent']]
sns.barplot(data=g_imp_global, 
            x='origin',
            y='percent')

